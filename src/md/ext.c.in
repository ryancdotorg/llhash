/* c preprocessor template for Merkle–Damgård hash functions */
#ifndef HASH_NAME
/* this exists to keep the linter happy */
#define HASH_NAME SHA1

#include "../../macros.h"
#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <endian.h>
#include "sha1/param.h"
#include "../../util.h"
#include "../../gen/md/sha1/ext.h"
#else
#include "../../macros.h"
h(include <stdint.h>)
h(include <stddef.h>)
h(include <string.h>)
h(include <endian.h>)
h(include STR(../../../src/md/HASH_name/param.h))
h(include STR(../../../util.h))
h(define HASH(EXT_C))
h(include STR(ext.h))
#endif

//#define prblk(a, b) _prblk(a, b, __FILE__, __LINE__)
#ifndef prblk
#define prblk(...)
#endif

/*
void HKDF(Extract)(
uint8_t *prk,
const uint8_t salt[], size_t salt_sz,
const uint8_t ikm[], size_t ikm_sz) {
  JOIN(HMAC,HASH_NAME)(salt, salt_sz, ikm, ikm_sz, prk);
}
*/

/*
void HKDF(Expand)(
uint8_t *okm, size_t okm_sz,
const uint8_t prk[], size_t prk_sz,
const uint8_t info[], size_t info_sz) {
  uint8_t scratch[sizeof(HMAC(CTX)) + HASH_BLOCK_LENGTH * 2];
  uint8_t *restrict tail = scratch;
  HMAC(CTX) *restrict ctx = (HMAC(CTX)*)(scratch + HASH_BLOCK_LENGTH * 2);
  HMAC(Init)(ctx, prk, prk_sz);
}
*/

#define PBKDF2_NAME JOIN(PBKDF2,HMAC,HASH_NAME)

#define PBKDF2_NAME_1 JOIN(PBKDF2_NAME,1)

#define PBKDF2_NAME_Range JOIN(PBKDF2_NAME,Range)

#define PBKDF2_NAME_Block JOIN(PBKDF2_NAME,Block)

void PBKDF2_NAME_1(
uint8_t dk[], size_t dk_sz,
const uint8_t pass[], size_t pass_sz,
const uint8_t salt[], size_t salt_sz) {
  uint8_t scratch[sizeof(HMAC(CTX)) * 1 + HASH_STATE_BYTES * 1 + HASH_BLOCK_LENGTH * 2];
  HMAC(CTX) *restrict ctx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*0 + HASH_STATE_BYTES*0);
  uintWS_t *restrict U = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*1 + HASH_STATE_BYTES*0);
  uint8_t *restrict otail = scratch + sizeof(HMAC(CTX))*1 + HASH_STATE_BYTES*1;

  HMAC(Init)(ctx, pass, pass_sz);
  HMAC(Update)(ctx, salt, salt_sz);

  size_t nout = 0;
  uint32_t block = 1;

  memcpy(otail, ctx->data, ctx->datalen);
  uint8_t otail_blks = HASH(Tail)(otail, ctx->bytelen + ctx->datalen + 4);

  while (nout < dk_sz) {
    memcpy(U, ctx->state, HASH_STATE_BYTES);
    otail[ctx->datalen+0] = (block >> 24) & 0xff;
    otail[ctx->datalen+1] = (block >> 16) & 0xff;
    otail[ctx->datalen+2] = (block >>  8) & 0xff;
    otail[ctx->datalen+3] = (block >>  0) & 0xff;
    HASH(Transform)(U, otail, otail_blks);
    SERIALIZE(ctx->hmac + HASH_BLOCK_LENGTH, U);
    HASH(Set_IV)(U);
    HASH(Transform)(U, ctx->hmac, HMAC_OUTER_BLOCKS);

    if (nout + HASH_DIGEST_LENGTH <= dk_sz) {
      SERIALIZE(dk + nout, U);
      nout += HASH_DIGEST_LENGTH;
    } else {
      HASH(Partial)(dk + nout, U, 0, dk_sz - nout);
      break;
      nout = dk_sz;
    }
    ++block;
  }

  wipe(scratch);
}

static inline void PBKDF2_NAME_Block(
HMAC(CTX) *restrict octx, HMAC(CTX) *restrict ictx,
uint8_t *restrict otail, uint8_t *restrict itail,
uint8_t otail_blks, uint8_t itail_blks,
uintWS_t *restrict T, uintWS_t *restrict U,
uint32_t c, uint32_t block) {
  memcpy(U, octx->state, HASH_STATE_BYTES);
  otail[octx->datalen+0] = (block >> 24) & 0xff;
  otail[octx->datalen+1] = (block >> 16) & 0xff;
  otail[octx->datalen+2] = (block >>  8) & 0xff;
  otail[octx->datalen+3] = (block >>  0) & 0xff;
  HASH(Transform)(U, otail, otail_blks);
h(if !defined(NATIVE_ENDIAN) || HASH_ENDIAN == __BYTE_ORDER__)
  SERIALIZE(octx->hmac + HASH_BLOCK_LENGTH, U);
h(else)
  memcpy(octx->hmac + HASH_BLOCK_LENGTH, U, HASH_DIGEST_LENGTH);
h(endif)
  //prblk(octx->hmac, HMAC_OUTER_BLOCKS);
  HASH(Set_IV)(U);
h(if !defined(NATIVE_ENDIAN) || HASH_ENDIAN == __BYTE_ORDER__)
  HASH(Transform)(U, octx->hmac, HMAC_OUTER_BLOCKS);
h(else)
  HASH(Native)(U, octx->hmac, HMAC_OUTER_BLOCKS);
h(endif)
  memcpy(T, U, HASH_STATE_BYTES);
  //prblk(T, 1);
  for (size_t i = 1; i < c; ++i) {
h(if !defined(NATIVE_ENDIAN) || HASH_ENDIAN == __BYTE_ORDER__)
    /* inner hash with previous U */
    SERIALIZE(itail, U);
    memcpy(U, ictx->state, HASH_STATE_BYTES);
    HASH(Transform)(U, itail, itail_blks);
    /* outer hash with inner result */
    SERIALIZE(ictx->hmac + HASH_BLOCK_LENGTH, U);
    HASH(Set_IV)(U);
    HASH(Transform)(U, ictx->hmac, HMAC_OUTER_BLOCKS);
h(else)
    /* inner hash with previous U */
    memcpy(itail, U, HASH_STATE_BYTES);
    memcpy(U, ictx->state, HASH_STATE_BYTES);
    HASH(Native)(U, itail, itail_blks);
    memcpy(itail, U, HASH_STATE_BYTES);
    /* outer hash with inner result */
    memcpy(U, W, HASH_STATE_BYTES);
    HASH(Native)(U, itail, itail_blks);
h(endif)
    #define _XOR(n, _) T[n] ^= U[n]
    REPEAT_WITH_COUNTER(HASH_STATE_WORDS, SEMICOLON, _XOR);
    #undef _XOR
  }
}

void PBKDF2_NAME(
uint8_t dk[], size_t dk_sz,
const uint8_t pass[], size_t pass_sz,
const uint8_t salt[], size_t salt_sz,
uint32_t c) {
  uint8_t scratch[sizeof(HMAC(CTX)) * 2 + HASH_STATE_BYTES * 3 + HASH_BLOCK_LENGTH * (2+HMAC_OUTER_BLOCKS)];
  HMAC(CTX) *restrict octx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*1 + HASH_STATE_BYTES*0);
  HMAC(CTX) *restrict ictx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*0 + HASH_STATE_BYTES*0);
  uint8_t *restrict otail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*0;
  uint8_t *restrict itail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*2;
  uintWS_t *restrict T = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*0);
  uintWS_t *restrict U = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*1);
  uintWS_t *restrict W = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*2);

  HMAC(Init)(ictx, pass, pass_sz);
  HMAC(Clone)(octx, ictx);
  HMAC(Update)(octx, salt, salt_sz);

  HASH(Set_IV)(W);
h(if !defined(NATIVE_ENDIAN) || HASH_ENDIAN == __BYTE_ORDER__)
  HASH(Transform)(W, ictx->hmac, 1);
h(else)
  HASH(Native)(W, ictx->hmac, 1);
h(endif)

  size_t nout = 0;
  uint32_t block = 1;

  memcpy(otail, octx->data, octx->datalen);
  uint8_t otail_blks = HASH(Tail)(otail, octx->bytelen + octx->datalen + 4);
  uint8_t itail_blks = HASH(Tail)(itail, HASH_BLOCK_LENGTH + HASH_DIGEST_LENGTH);
h(if defined(NATIVE_ENDIAN) && HASH_ENDIAN != __BYTE_ORDER__)
  HASH(Bswap)(itail, itail_blks);
h(endif)

  while (nout < dk_sz) {
    PBKDF2_NAME_Block(octx, ictx, otail, itail, otail_blks, itail_blks, T, U, c, block);

    if (nout + HASH_DIGEST_LENGTH <= dk_sz) {
      SERIALIZE(dk + nout, T);
      nout += HASH_DIGEST_LENGTH;
    } else {
      HASH(Partial)(dk + nout, T, 0, dk_sz - nout);
      break;
      nout = dk_sz;
    }

    ++block;
  }

  wipe(scratch);
}

void PBKDF2_NAME_Range(
uint8_t dk[], size_t dk_off, size_t dk_end,
const uint8_t pass[], size_t pass_sz,
const uint8_t salt[], size_t salt_sz,
uint32_t c) {
  uint8_t scratch[sizeof(HMAC(CTX)) * 2 + HASH_STATE_BYTES * 3 + HASH_BLOCK_LENGTH * (2+HMAC_OUTER_BLOCKS)];
  HMAC(CTX) *restrict ictx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*0 + HASH_STATE_BYTES*0);
  HMAC(CTX) *restrict octx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*1 + HASH_STATE_BYTES*0);
  uintWS_t *restrict T = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*0);
  uintWS_t *restrict U = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*1);
  uintWS_t *restrict W = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*2);
  uint8_t *restrict otail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*0;
  uint8_t *restrict itail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*2;

  HMAC(Init)(ictx, pass, pass_sz);
  HMAC(Clone)(octx, ictx);
  HMAC(Update)(octx, salt, salt_sz);

  HASH(Set_IV)(W);
h(if !defined(NATIVE_ENDIAN) || HASH_ENDIAN == __BYTE_ORDER__)
  HASH(Transform)(W, ictx->hmac, 1);
h(else)
  HASH(Native)(W, ictx->hmac, 1);
h(endif)

  size_t dk_pos = 0;
  size_t nout = dk_off - (dk_off % HASH_DIGEST_LENGTH);
  uint32_t block = (dk_off / HASH_DIGEST_LENGTH) + 1;

  memcpy(otail, octx->data, octx->datalen);
  uint8_t otail_blks = HASH(Tail)(otail, octx->bytelen + octx->datalen + 4);
  uint8_t itail_blks = HASH(Tail)(itail, HASH_BLOCK_LENGTH + HASH_DIGEST_LENGTH);
h(if defined(NATIVE_ENDIAN) && HASH_ENDIAN != __BYTE_ORDER__)
  HASH(Bswap)(itail, itail_blks);
h(endif)

  while (nout < dk_end) {
    //printf(">>> %s[%zu:%zu] block %u, nout %4zu, dk_pos %4zu\n", __func__, dk_off, dk_end, block, nout, dk_pos);
    PBKDF2_NAME_Block(octx, ictx, otail, itail, otail_blks, itail_blks, T, U, c, block);

    if (nout < dk_off) {
      if (dk_end < nout + HASH_DIGEST_LENGTH) {
        //printf("A dk[%zu] <- HASH[%zu:%zu]\n", dk_pos, dk_off - nout, dk_end - nout);
        HASH(Partial)(dk + dk_pos, T, dk_off - nout, dk_end - nout);
        break;
      } else {
        //printf("B dk[%zu] <- HASH[%zu:%d]\n", dk_pos, dk_off - nout, HASH_DIGEST_LENGTH);
        HASH(Partial)(dk + dk_pos, T, dk_off - nout, HASH_DIGEST_LENGTH);
        //printf("dk_pos += %d\n", HASH_DIGEST_LENGTH - (dk_off - nout));
        dk_pos += HASH_DIGEST_LENGTH - (dk_off - nout);
        nout += HASH_DIGEST_LENGTH;
      }
    } else if (nout + HASH_DIGEST_LENGTH <= dk_end) {
      //printf("C dk[%zu] <- HASH[%d:%d]\n", dk_pos, 0, HASH_DIGEST_LENGTH);
      SERIALIZE(dk + dk_pos, T);
      dk_pos += HASH_DIGEST_LENGTH;
      nout += HASH_DIGEST_LENGTH;
    } else {
      //printf("D dk[%zu] <- HASH[%d:%zu]\n", dk_pos, 0, dk_end - nout);
      HASH(Partial)(dk + dk_pos, T, 0, dk_end - nout);
      break;
    }

    ++block;
  }

  wipe(scratch);
}
