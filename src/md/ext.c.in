/* c preprocessor template for Merkle–Damgård hash functions */
#ifndef HASH_NAME
/* this exists to keep the linter happy */
#define HASH_SHA1

#include "../../macros.h"
#include <stdint.h>
#include <stddef.h>
#include <string.h>
#ifndef __STDC_NO_ATOMICS__
#include <stdatomic.h>
#endif
#include "../../util.h"
#include "../../gen/md/sha1/ext.h"
#else
#include "../../macros.h"
h(include <stdint.h>)
h(include <stddef.h>)
h(include <string.h>)
h(ifndef __STDC_NO_ATOMICS__)
h(include <stdatomic.h>)
h(endif)
h(include STR(../../../util.h))
h(define HASH(EXT_C))
h(include STR(ext.h))
#endif

//#define prblk(a, b) _prblk(a, b, __FILE__, __LINE__)
#ifndef prblk
#define prblk(...)
#endif

//h(if HASH_ENDIAN != __BYTE_ORDER__)
// Me: Given a byte position within an array of words, I need to know what the
// equivalent position will be after I bswap that array, so...
// (((O)&~(HASH_WORD_BYTES-1))+(HASH_WORD_BYTES-1))-(((O)&(HASH_WORD_BYTES-1)))
// Optimizer: That just sounds like...
h(define BSWAP_OFFSET(O) ((O)^(HASH_WORD_BYTES-1)))
// ...with extra steps.
//h(else)
//h(define BSWAP_OFFSET(O) (O))
//h(endif)

static void HMAC(Outer)(uint8_t hmac[HASH_BLOCK_LENGTH*HMAC_OUTER_BLOCKS], uintWS_t state[HASH_STATE_WORDS]);

h(ifndef __STDC_NO_ATOMICS__)
static HMAC(CTX) HMAC(EmptyKey) = { .data = {1} };
h(endif)

void HKDF(Extract)(
uint8_t *prk,
const uint8_t salt[], size_t salt_sz,
const uint8_t ikm[], size_t ikm_sz) {
  if (salt_sz != 0) {
    HMAC_NAME(salt, salt_sz, ikm, ikm_sz, prk);
  } else {
    HMAC(CTX) ctx;

h(ifdef __STDC_NO_ATOMICS__)
    HMAC(Init)(&ctx, "", 0);
h(else)
    // try to compute data for empty key once...
    if (HMAC(EmptyKey).data[0] == 0) {
      HMAC(Clone)(&ctx, &HMAC(EmptyKey));
    } else {
      HMAC(Init)(&ctx, "", 0);

      uint8_t init = 1;
      if (atomic_compare_exchange_strong(&(HMAC(EmptyKey).data[0]), &init, 2)) {
        HMAC(Init)(&HMAC(EmptyKey), "", 0);
        HMAC(Clone)(&HMAC(EmptyKey), &ctx);
        atomic_store(&(HMAC(EmptyKey).data[0]), 0);
      }
    }
h(endif)

    HMAC(Update)(&ctx, ikm, ikm_sz);
    HMAC(Final)(prk, &ctx);
  }
}

/*
inline void HKDF(Expand_Init)(
HMAC(CTX) *ctx,
const uint8_t prk[], size_t prk_sz) {
  HMAC(Init)(ctx, prk, prk_sz);
}

inline int HKDF(Expand_CTX)(
HMAC(CTX) *ctx,
uint8_t *okm, size_t okm_sz,
const uint8_t info[], size_t info_sz) {
  if (okm_sz > HASH_DIGEST_LENGTH * 255) return -1;
  uint8_t n, block = 1;

  uint8_t scratch[HASH_BLOCK_LENGTH * 2 + sizeof(HMAC(CTX))];
  uint8_t *restrict tail = scratch;
  HMAC(CTX) *restrict tctx = (HMAC(CTX)*)(scratch + HASH_BLOCK_LENGTH * 2);


  wipe(scratch);
  return 0;
}
*/

int HKDF(Expand)(
uint8_t *okm, size_t okm_sz,
const uint8_t prk[], size_t prk_sz,
const uint8_t info[], size_t info_sz) {
  if (okm_sz > HASH_DIGEST_LENGTH * 255) return -1;
  uint8_t block = 1;

  // single output block case
  if (okm_sz <= HASH_DIGEST_LENGTH) {
    HMAC(CTX) quick;
    HMAC(Init)(&quick, prk, prk_sz);
    if (info_sz > 0) HMAC(Update)(&quick, info, info_sz);
    HMAC(Update)(&quick, &block, 1);
    if (okm_sz == HASH_DIGEST_LENGTH) {
      HMAC(Final)(okm, &quick);
    } else {
      HMAC(Semifinal)(&quick);
      HASH(Partial)(okm, quick.state, 0, okm_sz);
    }
    wipe(&quick, sizeof(quick));
    return 0;
  }

  const uint8_t *data;
  uint8_t scratch[HASH_BLOCK_LENGTH * 3 + sizeof(HMAC(CTX)) * 2];
  uint8_t *blkptr, *head = scratch;
  uint8_t *tail = scratch + HASH_BLOCK_LENGTH * 1;
  HMAC(CTX) *restrict ctx = (HMAC(CTX)*)(scratch + HASH_BLOCK_LENGTH * 3 + sizeof(HMAC(CTX)) * 0);
  HMAC(CTX) *restrict key = (HMAC(CTX)*)(scratch + HASH_BLOCK_LENGTH * 3 + sizeof(HMAC(CTX)) * 1);

  // ceil(okm_sz / HASH_DIGEST_LENGTH)
  uint8_t n = (okm_sz+(HASH_DIGEST_LENGTH-1)) / HASH_DIGEST_LENGTH;
  uint8_t head_blks, data_blks, tail_blks;
  size_t ioff, irem;

  HMAC(Init)(key, prk, prk_sz);
  HMAC(Clone)(ctx, key);

  if (info_sz > 0) {
    HMAC(Update)(ctx, info, info_sz);
    size_t dlen = HASH_DIGEST_LENGTH + info_sz + 1;
    if (dlen < (HASH_BLOCK_LENGTH*3-(HASH_WORD_SIZE/4))) {
      // previous hash output, info, and block number are small enough to fit
      // in three blocks after padding, set up for a single transform per block
      ioff = irem = 0; tail = NULL; // head may be overlapping tail
      //memcpy(head + HASH_DIGEST_LENGTH, info, info_sz);
      OFFSETCPY(head, HASH_DIGEST_LENGTH, info, info_sz);

      head_blks = HASH(Pad)(head, dlen);
      data_blks = 0;
      tail_blks = 0;

      blkptr = head + HASH_DIGEST_LENGTH + info_sz;
    } else {
      // data hashed per block too big for buffers, split for three calls:
      //
      // HMAC_Update(T_prev || info[0:HASH_BLOCK_LENGTH-HASH_DIGEST_LENGTH])
      // HMAC_Update(info[HASH_BLOCK_LENGTH-HASH_DIGEST_LENGTH:...])
      // HMAC_Update(info[...:] || padding)
      ioff = ((HASH_DIGEST_LENGTH + info_sz) & ~(HASH_BLOCK_LENGTH-1)) - HASH_DIGEST_LENGTH;
      irem = info_sz - ioff;
      // memcpy(head + HASH_DIGEST_LENGTH, info, HASH_BLOCK_LENGTH - HASH_DIGEST_LENGTH);
      TAILCPY(head, info, HASH_DIGEST_LENGTH, HASH_BLOCK_LENGTH);
      data = info + ioff;
      memcpy(tail, data, irem);

      head_blks = 1;
      data_blks = (ioff - (HASH_BLOCK_LENGTH - HASH_DIGEST_LENGTH)) / HASH_BLOCK_LENGTH;
      tail_blks = HASH(Tail)(tail, irem + 1);

      blkptr = tail + irem;
    }
  } else {
    head_blks = HASH(Pad)(head, HASH_DIGEST_LENGTH + 1);
    data_blks = 0;
    tail_blks = 0;
    blkptr = head + HASH_DIGEST_LENGTH + 1;
  }

  HMAC(Update)(ctx, &block, 1);
  HMAC(Final)(okm, ctx);

  *blkptr = block;

  if (data_blks == 0) {
    for (;;) {
      memcpy(head, okm, HASH_DIGEST_LENGTH);
      memcpy(ctx->state, key->state, HASH_STATE_BYTES);
      HASH(Transform)(ctx->state, head, head_blks);
      HMAC(Outer)(key->hmac, ctx->state);
      if (++*blkptr < n) break;
      // any block up to the last one must be filled
      okm += HASH_DIGEST_LENGTH;
      SERIALIZE(okm, ctx->state);
    }
  } else {
    for (;;) {
      memcpy(head, okm, HASH_DIGEST_LENGTH);
      memcpy(ctx->state, key->state, HASH_STATE_BYTES);
      HASH(Transform)(ctx->state, head, head_blks);
      HASH(Transform)(ctx->state, data, data_blks);
      HASH(Transform)(ctx->state, tail, tail_blks);
      HMAC(Outer)(key->hmac, ctx->state);
      if (++*blkptr < n) break;
      // any block up to the last one must be filled
      okm += HASH_DIGEST_LENGTH;
      SERIALIZE(okm, ctx->state);
    }
  }

  // output final bytes
  okm += HASH_DIGEST_LENGTH;
  HASH(Partial)(okm, ctx->state, 0, okm_sz % HASH_DIGEST_LENGTH);

  wipe(scratch);
  return 0;
}

void PBKDF2(1)(
uint8_t dk[], size_t dk_sz,
const uint8_t pass[], size_t pass_sz,
const uint8_t salt[], size_t salt_sz) {
  uint8_t scratch[sizeof(HMAC(CTX)) * 1 + HASH_STATE_BYTES * 1 + HASH_BLOCK_LENGTH * 2];
  HMAC(CTX) *restrict ctx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*0 + HASH_STATE_BYTES*0);
  uintWS_t *restrict U = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*1 + HASH_STATE_BYTES*0);
  uint8_t *restrict otail = scratch + sizeof(HMAC(CTX))*1 + HASH_STATE_BYTES*1;

  HMAC(Init)(ctx, pass, pass_sz);
  HMAC(Update)(ctx, salt, salt_sz);

  size_t nout = 0;
  uint32_t block = 1;

  memcpy(otail, ctx->data, ctx->datalen);
  uint8_t otail_blks = HASH(Tail)(otail, ctx->bytelen + ctx->datalen + 4);

  while (nout < dk_sz) {
    memcpy(U, ctx->state, HASH_STATE_BYTES);
    STOR32BE(otail+ctx->datalen, block);
    HASH(Transform)(U, otail, otail_blks);
    SERIALIZE(ctx->hmac + HASH_BLOCK_LENGTH, U);
    HASH(Set_IV)(U);
    HASH(Transform)(U, ctx->hmac, HMAC_OUTER_BLOCKS);

    if (nout + HASH_DIGEST_LENGTH <= dk_sz) {
      SERIALIZE(dk + nout, U);
      nout += HASH_DIGEST_LENGTH;
    } else {
      HASH(Partial)(dk + nout, U, 0, dk_sz - nout);
      break;
      nout = dk_sz;
    }
    ++block;
  }

  wipe(scratch);
}

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
static inline void PBKDF2(Block)(
HMAC(CTX) *restrict octx, HMAC(CTX) *restrict ictx,
uint8_t *restrict otail, uint8_t *restrict itail,
uint8_t otail_blks, uint8_t itail_blks,
uintWS_t *restrict T, uintWS_t *restrict U, uintWS_t *restrict W,
uint32_t c, uint32_t block) {
  memcpy(U, octx->state, HASH_STATE_BYTES);
  STOR32BE(otail+octx->datalen, block);
  HASH(Transform)(U, otail, otail_blks);
h(if HASH_ENDIAN == __BYTE_ORDER__)
  SERIALIZE(octx->hmac + HASH_BLOCK_LENGTH, U);
h(else)
  // memcpy(octx->hmac + HASH_BLOCK_LENGTH, U, HASH_DIGEST_LENGTH);
  OFFSETCPY(octx->hmac, HASH_BLOCK_LENGTH, U, HASH_DIGEST_LENGTH);
h(endif)
  //prblk(octx->hmac, HMAC_OUTER_BLOCKS);
  HASH(Set_IV)(U);
  HASH(Native)(U, (uintWS_t*)octx->hmac, HMAC_OUTER_BLOCKS);
  memcpy(T, U, HASH_STATE_BYTES);
  //prblk(T, 1);
  for (size_t i = 1; i < c; ++i) {
h(if HASH_ENDIAN == __BYTE_ORDER__)
    /* inner hash with previous U */
    SERIALIZE(itail, U);
    memcpy(U, ictx->state, HASH_STATE_BYTES);
    HASH(Transform)(U, itail, itail_blks);
    /* outer hash with inner result */
    SERIALIZE(ictx->hmac + HASH_BLOCK_LENGTH, U);
    HASH(Set_IV)(U);
    //memcpy(U, W, HASH_STATE_BYTES);
    HASH(Transform)(U, ictx->hmac, HMAC_OUTER_BLOCKS);
h(else)
    /* inner hash with previous U */
    memcpy(itail, U, HASH_STATE_BYTES);
    memcpy(U, ictx->state, HASH_STATE_BYTES);
    HASH(Native)(U, (uintWS_t*)itail, itail_blks);
    memcpy(itail, U, HASH_STATE_BYTES);
    /* outer hash with inner result */
    memcpy(U, W, HASH_STATE_BYTES);
    HASH(Native)(U, (uintWS_t*)itail, itail_blks);
h(endif)
    #define _XOR(n, _) T[n] ^= U[n]
    REPEAT_WITH_COUNTER(HASH_STATE_WORDS, SEMICOLON, _XOR);
    #undef _XOR
  }
}
#pragma GCC diagnostic pop

void PBKDF2_NAME(
uint8_t dk[], size_t dk_sz,
const uint8_t pass[], size_t pass_sz,
const uint8_t salt[], size_t salt_sz,
uint32_t c) {
  uint8_t scratch[sizeof(HMAC(CTX)) * 2 + HASH_STATE_BYTES * 3 + HASH_BLOCK_LENGTH * (2+HMAC_OUTER_BLOCKS)];
  HMAC(CTX) *restrict octx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*0);
  HMAC(CTX) *restrict ictx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*1);
  uintWS_t *restrict T = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*0);
  uintWS_t *restrict U = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*1);
  uintWS_t *restrict W = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*2);
  uint8_t *restrict otail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*0;
  uint8_t *restrict itail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*2;

  HMAC(Init)(ictx, pass, pass_sz);
  HMAC(Clone)(octx, ictx);
  HMAC(Update)(octx, salt, salt_sz);

  HASH(Set_IV)(W);
h(if HASH_ENDIAN == __BYTE_ORDER__)
  HASH(Transform)(W, ictx->hmac, 1);
h(else)
  HASH(Native)(W, (uintWS_t*)ictx->hmac, 1);
h(endif)

  size_t nout = 0;
  uint32_t block = 1;

  memcpy(otail, octx->data, octx->datalen);
  uint8_t otail_blks = HASH(Tail)(otail, octx->bytelen + octx->datalen + 4);
  uint8_t itail_blks = HASH(Tail)(itail, HASH_BLOCK_LENGTH + HASH_DIGEST_LENGTH);
h(if HASH_ENDIAN != __BYTE_ORDER__)
  HASH(Bswap)((uintWS_t*)itail, itail_blks);
h(endif)

  while (nout < dk_sz) {
    PBKDF2(Block)(octx, ictx, otail, itail, otail_blks, itail_blks, T, U, W, c, block);

    if (nout + HASH_DIGEST_LENGTH <= dk_sz) {
      SERIALIZE(dk + nout, T);
      nout += HASH_DIGEST_LENGTH;
    } else {
      HASH(Partial)(dk + nout, T, 0, dk_sz - nout);
      break;
      nout = dk_sz;
    }

    ++block;
  }

  wipe(scratch);
}

void PBKDF2(Range)(
uint8_t dk[], size_t dk_off, size_t dk_end,
const uint8_t pass[], size_t pass_sz,
const uint8_t salt[], size_t salt_sz,
uint32_t c) {
  uint8_t scratch[sizeof(HMAC(CTX)) * 2 + HASH_STATE_BYTES * 3 + HASH_BLOCK_LENGTH * (2+HMAC_OUTER_BLOCKS)];
  HMAC(CTX) *restrict ictx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*0 + HASH_STATE_BYTES*0);
  HMAC(CTX) *restrict octx = (HMAC(CTX)*)(scratch + sizeof(HMAC(CTX))*1 + HASH_STATE_BYTES*0);
  uintWS_t *restrict T = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*0);
  uintWS_t *restrict U = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*1);
  uintWS_t *restrict W = (uintWS_t*)(scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*2);
  uint8_t *restrict otail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*0;
  uint8_t *restrict itail = scratch + sizeof(HMAC(CTX))*2 + HASH_STATE_BYTES*3 + HASH_BLOCK_LENGTH*2;

  HMAC(Init)(ictx, pass, pass_sz);
  HMAC(Clone)(octx, ictx);
  HMAC(Update)(octx, salt, salt_sz);

  HASH(Set_IV)(W);
h(if HASH_ENDIAN == __BYTE_ORDER__)
  HASH(Transform)(W, ictx->hmac, 1);
h(else)
  HASH(Native)(W, (uintWS_t*)ictx->hmac, 1);
h(endif)

  size_t dk_pos = 0;
  size_t nout = dk_off - (dk_off % HASH_DIGEST_LENGTH);
  uint32_t block = (dk_off / HASH_DIGEST_LENGTH) + 1;

  memcpy(otail, octx->data, octx->datalen);
  uint8_t otail_blks = HASH(Tail)(otail, octx->bytelen + octx->datalen + 4);
  uint8_t itail_blks = HASH(Tail)(itail, HASH_BLOCK_LENGTH + HASH_DIGEST_LENGTH);
h(if HASH_ENDIAN != __BYTE_ORDER__)
  HASH(Bswap)((uintWS_t*)itail, itail_blks);
h(endif)

  while (nout < dk_end) {
    PBKDF2(Block)(octx, ictx, otail, itail, otail_blks, itail_blks, T, U, W, c, block);

    if (nout < dk_off) {
      if (dk_end < nout + HASH_DIGEST_LENGTH) {
        HASH(Partial)(dk + dk_pos, T, dk_off - nout, dk_end - nout);
        break;
      } else {
        HASH(Partial)(dk + dk_pos, T, dk_off - nout, HASH_DIGEST_LENGTH);
        dk_pos += HASH_DIGEST_LENGTH - (dk_off - nout);
        nout += HASH_DIGEST_LENGTH;
      }
    } else if (nout + HASH_DIGEST_LENGTH <= dk_end) {
      SERIALIZE(dk + dk_pos, T);
      dk_pos += HASH_DIGEST_LENGTH;
      nout += HASH_DIGEST_LENGTH;
    } else {
      HASH(Partial)(dk + dk_pos, T, 0, dk_end - nout);
      break;
    }

    ++block;
  }

  wipe(scratch);
}
