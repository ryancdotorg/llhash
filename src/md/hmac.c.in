/* c preprocessor template for Merkle–Damgård hmac functions */
#ifndef HASH_NAME
/* this exists to keep the linter happy */
#define HASH_SHA1

#include "../../macros.h"
#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <endian.h>
#include <stdio.h>
#include "../../util.h"
#include "../../gen/md/sha1/hmac.h"
#else
#include "../../macros.h"
h(include <stdint.h>)
h(include <stddef.h>)
h(include <string.h>)
h(include <endian.h>)
h(include <stdio.h>)
h(include STR(../../../util.h))
h(define HASH(HMAC_C))
h(include STR(hmac.h))
#endif

void HMAC(Clone)(HMAC(CTX) *dst, const HMAC(CTX) *src) {
  // relies on .data being first
  if (src->datalen) {
    memcpy(dst, src, sizeof(HMAC(CTX)));
  } else {
    TAILCPY(dst, src, HASH_BLOCK_LENGTH, sizeof(HMAC(CTX)));
  }
}

void HMAC(Init)(HMAC(CTX) *ctx, const void *key, size_t len) {
  //memset(ctx, 0x41, sizeof(HMAC(CTX)));
  HASH(Init)((HASH(CTX)*)ctx);

  // populate padded key
  if (len > HASH_BLOCK_LENGTH) {
    // long keys need to be hashed
    uintWS_t *outer = (uintWS_t *)(ctx->hmac);
    HASH(Set_IV)(outer);
    size_t data_blocks = len / HASH_BLOCK_LENGTH;
    size_t remaining_bytes = len % HASH_BLOCK_LENGTH;
    HASH(Transform)(outer, key, data_blocks);

    OFFSETCPY(ctx->data, 0, key, data_blocks * HASH_BLOCK_LENGTH, remaining_bytes);
    if (remaining_bytes < (HASH_BLOCK_LENGTH-(HASH_WORD_SIZE/4))) {
      ctx->data[remaining_bytes++] = 0x80;
      OFFSETFILL(ctx->data, remaining_bytes, 0, (HASH_BLOCK_LENGTH-8));
    } else {
      ctx->data[remaining_bytes++] = 0x80;
      OFFSETFILL(ctx->data, remaining_bytes, 0, HASH_BLOCK_LENGTH);
      HASH(Transform)(outer, ctx->data, 1);
      memset(ctx->data, 0, HASH_BLOCK_LENGTH-8);
    }

    stor64De(ctx->data + HASH_BLOCK_LENGTH - 8, len*8);
    HASH(Transform)(outer, ctx->data, 1);

    // generate ipad
    for (size_t i = 0; i < HASH_DIGEST_LENGTH; ++i) ctx->hmac[i] ^= 0x36;
    OFFSETFILL(ctx->hmac, HASH_DIGEST_LENGTH, 0x36, HASH_BLOCK_LENGTH);
  } else {
    memcpy(ctx->hmac, key, len);

    // generate ipad
    for (size_t i = 0; i < len; ++i) ctx->hmac[i] ^= 0x36;
    OFFSETFILL(ctx->hmac, len, 0x36, HASH_BLOCK_LENGTH);
    blockDetoh(ctx->hmac);
  }

  // load ipad into hash state
  ctx->bytelen = HASH_BLOCK_LENGTH;
  HASH(Native)(ctx->state, (uintWS_t*)ctx->hmac, 1);

  // convert ipad to opad (0x6a == 0x36 ^ 0x5c)
  for (int i = 0; i < HASH_BLOCK_LENGTH; ++i) ctx->hmac[i] ^= 0x6a;

#define ILEN (HASH_BLOCK_LENGTH+HASH_DIGEST_LENGTH)
  // set up padding
h(if HASH_ENDIAN == __BYTE_ORDER__)
  ctx->hmac[ILEN] = 0x80;
  OFFSETFILL(ctx->hmac, ILEN + 1, 0, HASH_BLOCK_LENGTH * HMAC_OUTER_BLOCKS - 8);
  stor64De(ctx->hmac + HASH_BLOCK_LENGTH * HMAC_OUTER_BLOCKS - 8, ILEN*8);
h(else)
  OFFSETFILL(ctx->hmac, ILEN, 0, HASH_BLOCK_LENGTH * HMAC_OUTER_BLOCKS - 8);
  ctx->hmac[ILEN+(HASH_WORD_BYTES-1)] = 0x80;
#if HASH_WORD_SIZE == 64
  stor64h(ctx->hmac + HASH_BLOCK_LENGTH * HMAC_OUTER_BLOCKS - 8, ILEN * 8);
#else
  stor32h(ctx->hmac + HASH_BLOCK_LENGTH * HMAC_OUTER_BLOCKS - 8, ILEN>>29);
  stor32h(ctx->hmac + HASH_BLOCK_LENGTH * HMAC_OUTER_BLOCKS - 4, ILEN*8);
#endif
h(endif)
#undef ILEN
}

inline void HMAC(Update)(HMAC(CTX) *ctx, const uint8_t data[], size_t len) {
  HASH(Update)((HASH(CTX)*)ctx, data, len);
}

static inline void HMAC(Outer)(uint8_t hmac[HASH_BLOCK_LENGTH*HMAC_OUTER_BLOCKS], uintWS_t state[HASH_STATE_WORDS]) {
h(if HASH_ENDIAN == __BYTE_ORDER__)
  SERIALIZE(hmac + HASH_BLOCK_LENGTH, state);
h(else)
  OFFSETCPY(hmac, HASH_BLOCK_LENGTH, state, HASH_DIGEST_LENGTH);
h(endif)

  HASH(Set_IV)(state);
  HASH(Native)(state, (uintWS_t*)hmac, HMAC_OUTER_BLOCKS);
}

inline void HMAC(Semifinal)(HMAC(CTX) *ctx) {
  uint32_t i = ctx->datalen;

  // add padding bytes
  if (ctx->datalen < (HASH_BLOCK_LENGTH-(HASH_WORD_SIZE/4))) {
    ctx->data[i++] = 0x80;
    OFFSETFILL(ctx->data, i, 0, (HASH_BLOCK_LENGTH-8));
h(if HASH_ENDIAN == __BYTE_ORDER__)
    uintWS_t *data = (uintWS_t *)(ctx->data);
    for (size_t n = (i+(HASH_WORD_BYTES-1))/HASH_WORD_BYTES, j = 0; j < n; ++j) {
      data[j] = DeWStoh(data[j]);
    }
h(endif)
  } else {
    ctx->data[i++] = 0x80;
    OFFSETFILL(ctx->data, i, 0, HASH_BLOCK_LENGTH);
    HASH(Transform)(ctx->state, ctx->data, 1);
    memset(ctx->data, 0, HASH_BLOCK_LENGTH-8);
  }

  // add bit length
  ctx->bytelen += ctx->datalen;
  stor64De(ctx->data + HASH_BLOCK_LENGTH - 8, ctx->bytelen * 8);
  HASH(Transform)(ctx->state, ctx->data, 1);
  HMAC(Outer)(ctx->hmac, ctx->state);
}

inline void HMAC(Final)(uint8_t hash[], HMAC(CTX) *ctx) {
  HMAC(Semifinal)(ctx);
  HASH(Serialize)(hash, ctx->state);
}

void HMAC(Clear)(HMAC(CTX) *ctx) {
  wipe(ctx, sizeof(HMAC(CTX)));
}

void HMAC_NAME(const void *key, size_t key_sz, const uint8_t msg[], size_t msg_sz, uint8_t hash[]) {
  HMAC(CTX) ctx;

  HMAC(Init)(&ctx, key, key_sz);
  HMAC(Update)(&ctx, msg, msg_sz);
  HMAC(Final)(hash, &ctx);
}
