// SPDX-License-Identifier: BSD-2-Clause
// Copyright (c) 2022, Ryan Castellucci, all rights reserved

#include "../../macros.h"
h(pragma once)

h(include <stddef.h>)
h(include <stdint.h>)

h(include STR(../../../src/md/HASH_name/param.h))

h(ifdef HASH(HASH_C))
h(ifdef SERIALIZE)
h(undef SERIALIZE)
h(endif)
h(define SERIALIZE(A, B) serialize(A, B))
h(elif !defined(SERIALIZE))
h(define SERIALIZE(A, B) HASH(Serialize)(A, B))
h(endif)

h(if !(defined(__wasm) || defined(__wasm__) || defined(__WASM__)))
typedef void (*JOIN(HASH_name,xform_t))(uintWS_t *, const void *, uint32_t);
typedef void (*JOIN(HASH_name,native_t))(uintWS_t *, const uintWS_t *, uint32_t);

char * HASH(Describe)(int impl);
int HASH(Register)(int enable);

extern void (*HASH(Transform))(uintWS_t *digest, const void *data, uint32_t nblk);
extern void (*HASH(Native))(uintWS_t *digest, const uintWS_t *data, uint32_t nblk);
h(else)
void HASH(Transform)(uintWS_t *digest, const void *data, uint32_t nblk);
void HASH(Native)(uintWS_t *digest, const uintWS_t *data, uint32_t nblk);

#if EQUAL(HASH_NAME,SHA2_224)
#define IMPL_name sha2_256
#elif EQUAL(HASH_NAME,SHA2_384)
#define IMPL_name sha2_512
#else
#define IMPL_name HASH_name
#endif

extern void JOIN(IMPL_name,generic_xform)(uintWS_t *digest, const uintWS_t *data, uint32_t nblk);

#if HASH_ENDIAN == __BYTE_ORDER__
// nothing
#elif __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
extern void JOIN(IMPL_name,generic_xform_le)(uintWS_t *digest, const uintWS_t *data, uint32_t nblk);
#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
extern void JOIN(IMPL_name,generic_xform_be)(uintWS_t *digest, const uintWS_t *data, uint32_t nblk);
#endif
h(endif)

#if HASH_ALIASED
char * ALIAS(Describe)(int impl);
int ALIAS(Register)(int enable);
void ALIAS(Transform)(uintWS_t *digest, const void *data, uint32_t nblk);
void ALIAS(Native)(uintWS_t *digest, const uintWS_t *data, uint32_t nblk);
#endif

typedef struct {
  uint8_t data[HASH_BLOCK_LENGTH];
  uint64_t bytelen;
  uintWS_t state[HASH_STATE_WORDS];
  uint32_t datalen;
} HASH(CTX);

#if HASH_ALIASED
typedef HASH(CTX) ALIAS(CTX);
#endif

void HASH(Set_IV)(uintWS_t state[]);
void HASH(Clear)(HASH(CTX) *ctx);
void HASH(Clone)(HASH(CTX) *dst, const HASH(CTX) *src);
void HASH(Init)(HASH(CTX) *ctx);
void HASH(Init_IV)(HASH(CTX) *ctx, const uintWS_t *iv);
void HASH(Update)(HASH(CTX) *ctx, const uint8_t data[], size_t len);
void HASH(Final)(uint8_t hash[], HASH(CTX) *ctx);
uint8_t * IDENTITY(HASH_NAME)(const uint8_t data[], size_t len, uint8_t hash[]);

#if HASH_ALIASED
void ALIAS(Set_IV)(uintWS_t state[]);
void ALIAS(Clear)(ALIAS(CTX) *ctx);
void ALIAS(Clone)(ALIAS(CTX) *dst, const ALIAS(CTX) *src);
void ALIAS(Init_IV)(ALIAS(CTX) *ctx, const uintWS_t *iv);
void ALIAS(Init)(ALIAS(CTX) *ctx);
void ALIAS(Update)(ALIAS(CTX) *ctx, const uint8_t data[], size_t len);
void ALIAS(Final)(uint8_t hash[], ALIAS(CTX) *ctx);
uint8_t * IDENTITY(HASH_ALIAS)(const uint8_t data[], size_t len, uint8_t hash[]);
#endif

uint64_t HASH(Pad)(uint8_t data[], size_t len);
uint8_t HASH(Tail)(uint8_t last_data_block[], size_t len);
void HASH(Raw)(uint8_t hash[], const uint8_t data[], uint64_t nblk);
void HASH(Bswap)(uintWS_t data[], uint64_t nblk);
void HASH(Serialize)(uint8_t hash[], const uintWS_t state[]);
void HASH(Partial)(uint8_t hash[], const uintWS_t state[], size_t start, size_t end);

#if HASH_ALIASED
uint64_t ALIAS(Pad)(uint8_t data[], size_t len);
uint8_t ALIAS(Tail)(uint8_t last_data_block[], size_t len);
void ALIAS(Raw)(uint8_t hash[], const uint8_t data[], uint64_t nblk);
void ALIAS(Bswap)(uintWS_t data[], uint64_t nblk);
void ALIAS(Serialize)(uint8_t hash[], const uintWS_t state[]);
void ALIAS(Partial)(uint8_t hash[], const uintWS_t state[], size_t start, size_t end);
#endif

#if HASH_DIGEST_LENGTH == HASH_STATE_WORDS * (HASH_WORD_SIZE / 8)
void HASH(Extend)(HASH(CTX) *ctx, uint8_t hash[], uint64_t nblk);
#if HASH_ALIASED
void ALIAS(Extend)(ALIAS(CTX) *ctx, uint8_t hash[], uint64_t nblk);
#endif
#endif
