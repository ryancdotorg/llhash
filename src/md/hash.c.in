/* c preprocessor template for Merkle–Damgård hash functions */
#ifndef HASH_NAME
/* this exists to keep the linter happy */
#define HASH_NAME SHA1

#include "../../macros.h"
#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <endian.h>
#include "../../gen/md/sha1/hash.h"
#else
#include "../../macros.h"
h(include <stdint.h>)
h(include <stddef.h>)
h(include <string.h>)
h(include <endian.h>)
h(include STR(../../../src/md/HASH_name/param.h))
h(define HASH(HASH_C))
h(include "hash.h")
#endif

#if HASH_WORD_SIZE != 32 && HASH_WORD_SIZE != 64
#error "bad word size"
#elif HASH_ENDIAN != __ORDER_BIG_ENDIAN__ && HASH_ENDIAN !=  __ORDER_LITTLE_ENDIAN__
#error "bad endianess"
#endif

static const uintWS_t iv[] = HASH(IV);
static uint8_t output[HASH_DIGEST_LENGTH];

static inline void __attribute__((always_inline)) serialize(uint8_t hash[], const uintWS_t *state);

#if HASH_ALIASED
uint8_t * HASH_ALIAS(const uint8_t data[], size_t len, uint8_t hash[])
__attribute__((alias(STR(HASH_NAME))));
#endif
uint8_t * HASH_NAME(const uint8_t data[], size_t len, uint8_t hash[]) {
  static uint8_t padding[HASH_BLOCK_LENGTH*2];
  uint64_t dblk = len / HASH_BLOCK_LENGTH;
  int remaining_bytes = len & (HASH_BLOCK_LENGTH-1);

  // initialize state
  uintWS_t state[] = HASH(IV);

  // copy partial block bytes into the padding
  memcpy(padding, data + (dblk * HASH_BLOCK_LENGTH), remaining_bytes);
  // set a 1 bit after the data
  padding[remaining_bytes] = 0x80;

  if (dblk) HASH(Transform)(state, data, dblk);
  // set length
  if (remaining_bytes < (HASH_BLOCK_LENGTH-(HASH_WORD_SIZE/4))) {
    memset(padding + remaining_bytes + 1, 0, (HASH_BLOCK_LENGTH-8) - (remaining_bytes + 1));
    ((uint64_t *)padding)[(HASH_WORD_SIZE/4)-1] = htoDe64(len * 8);
    HASH(Transform)(state, padding, 1);
  } else {
    memset(padding + remaining_bytes + 1, 0, (HASH_BLOCK_LENGTH*2-8) - (remaining_bytes + 1));
    ((uint64_t *)padding)[(HASH_WORD_SIZE/2)-1] = htoDe64(len * 8);
    HASH(Transform)(state, padding, 2);
  }

  // write out result
  hash = hash != NULL ? hash : output;
  serialize(hash, state);
  return hash;
}

#if HASH_ALIASED
void ALIAS(Set_IV)(uintWS_t state[])
__attribute__((alias(STR(HASH(Set_IV)))));
#endif
inline void HASH(Set_IV)(uintWS_t state[]) {
  static uintWS_t iv[] = HASH(IV);
  memcpy(state, iv, HASH_STATE_WORDS * HASH_WORD_BYTES);
}

#if HASH_ALIASED
void ALIAS(Clone)(ALIAS(CTX) *dst, const ALIAS(CTX) *src)
__attribute__((alias(STR(HASH(Clone)))));
#endif
void HASH(Clone)(HASH(CTX) *dst, const HASH(CTX) *src) {
  // relies on .data being first
  if (src->datalen) {
    memcpy(dst, src, sizeof(HASH(CTX)));
  } else {
    // don't copy the data if there isn't any
    TAILCPY(dst, src, HASH_BLOCK_LENGTH, sizeof(HASH(CTX)));
  }
}

#if HASH_ALIASED
void ALIAS(Init)(ALIAS(CTX) *ctx)
__attribute__((alias(STR(HASH(Init)))));
#endif
void HASH(Init)(HASH(CTX) *ctx) {
  ctx->bytelen = ctx->datalen = 0;
  for (int i = 0; i < HASH(STATE_WORDS); ++i) ctx->state[i] = iv[i];
}

#if HASH_ALIASED
void ALIAS(Update)(ALIAS(CTX) *ctx, const uint8_t data[], size_t len)
__attribute__((alias(STR(HASH(Update)))));
#endif
void HASH(Update)(HASH(CTX) *ctx, const uint8_t data[], size_t len) {
  size_t i = 0;

  uint8_t *input = (uint8_t *)data;

  if (ctx->datalen > 0) {
    i = HASH_BLOCK_LENGTH - ctx->datalen;
    if (i > len) {
      //memcpy(ctx->data + ctx->datalen, input, len);
      OFFSETCPY(ctx->data, ctx->datalen, input, len);
      ctx->datalen += len;
      return;
    } else {
      //memcpy(ctx->data + ctx->datalen, input, i);
      OFFSETCPY(ctx->data, ctx->datalen, input, i);
      HASH(Transform)(ctx->state, ctx->data, 1);
      ctx->bytelen += HASH_BLOCK_LENGTH;
      ctx->datalen = 0;
      input += i;
      len -= i;
    }
  }

  if (len >= HASH_BLOCK_LENGTH) {
    i = len / HASH_BLOCK_LENGTH;
    HASH(Transform)(ctx->state, input, i);
    len -= i * HASH_BLOCK_LENGTH;
    input += i * HASH_BLOCK_LENGTH;
    ctx->bytelen += i * HASH_BLOCK_LENGTH;
  }

  memcpy(ctx->data, input, len);
  ctx->datalen = len;
}

#if HASH_ALIASED
void ALIAS(Final)(uint8_t hash[], ALIAS(CTX) *ctx)
__attribute__((alias(STR(HASH(Final)))));
#endif
void HASH(Final)(uint8_t hash[], HASH(CTX) *ctx) {
  uint32_t i = ctx->datalen;

  if (ctx->datalen < (HASH_BLOCK_LENGTH-(HASH_WORD_SIZE/4))) {
    ctx->data[i++] = 0x80;
    memset(ctx->data + i, 0, (HASH_BLOCK_LENGTH-8) - i);
  } else {
    ctx->data[i++] = 0x80;
    memset(ctx->data + i, 0, HASH_BLOCK_LENGTH - i);
    HASH(Transform)(ctx->state, ctx->data, 1);
    memset(ctx->data, 0, HASH_BLOCK_LENGTH-8);
  }

  // padding
  ctx->bytelen += ctx->datalen;
  ((uint64_t *)ctx->data)[(HASH_WORD_SIZE/4)-1] = htoDe64(ctx->bytelen*8);

  HASH(Transform)(ctx->state, ctx->data, 1);

  serialize(hash, ctx->state);
}

#if HASH_ALIASED
void ALIAS(Clear)(ALIAS(CTX) *ctx)
__attribute__((alias(STR(HASH(Clear)))));
#endif
void HASH(Clear)(HASH(CTX) *ctx) {
  ctx->bytelen = ctx->datalen = 0;
  for (int i = 0; i < HASH(STATE_WORDS); ++i) ctx->state[i] = 0;
}


// caller responsible for making sure the buffer is big enough
#if HASH_ALIASED
uint64_t ALIAS(Pad)(uint8_t data[], size_t len)
__attribute__((alias(STR(HASH(Pad)))));
#endif
uint64_t HASH(Pad)(uint8_t data[], size_t len) {
  uint64_t *bitlen_ptr;
  uint64_t nblk = len / HASH_BLOCK_LENGTH;
  int remaining_bytes = len & (HASH_BLOCK_LENGTH-1);

  // set a 1 bit after the data
  data[len] = 0x80;
  if (remaining_bytes < (HASH_BLOCK_LENGTH-(HASH_WORD_SIZE/4))) {
    memset(data + len + 1, 0, (HASH_BLOCK_LENGTH-8) - (remaining_bytes + 1));
    nblk += 1;
  } else {
    memset(data + len + 1, 0, (HASH_BLOCK_LENGTH*2-8) - (remaining_bytes + 1));
    nblk += 2;
  }

  bitlen_ptr = (uint64_t *)(data + (nblk * HASH_BLOCK_LENGTH) - 8);
  *bitlen_ptr = htoDe64(len * 8);

  return nblk;
}

// caller responsible for making sure the buffer is big enough
#if HASH_ALIASED
uint8_t ALIAS(Tail)(uint8_t last_data_block[], size_t len)
__attribute__((alias(STR(HASH(Tail)))));
#endif
uint8_t HASH(Tail)(uint8_t last_data_block[], size_t len) {
  int remaining_bytes = len & (HASH_BLOCK_LENGTH-1);

  // set a 1 bit after the data
  last_data_block[remaining_bytes] = 0x80;
  if (remaining_bytes < (HASH_BLOCK_LENGTH-(HASH_WORD_SIZE/4))) {
    memset(last_data_block + remaining_bytes + 1, 0, (HASH_BLOCK_LENGTH-8) - (remaining_bytes + 1));
    *((uint64_t *)(last_data_block + HASH_BLOCK_LENGTH - 8)) = htoDe64(len * 8);
    return 1;
  } else {
    memset(last_data_block + remaining_bytes + 1, 0, (HASH_BLOCK_LENGTH*2-8) - (remaining_bytes + 1));
    *((uint64_t *)(last_data_block + (HASH_BLOCK_LENGTH*2) - 8)) = htoDe64(len * 8);
    return 2;
  }
}

// caller is responsible for padding
#if HASH_ALIASED
void ALIAS(Raw)(uint8_t hash[], const uint8_t data[], uint64_t nblk)
__attribute__((alias(STR(HASH(Raw)))));
#endif
void HASH(Raw)(uint8_t hash[], const uint8_t data[], uint64_t nblk) {
  uintWS_t state[] = HASH(IV);

  HASH(Transform)(state, data, nblk);

  serialize(hash, state);
}

#if HASH_ALIASED
void ALIAS(Bswap)(uintWS_t data[], uint64_t nblk)
__attribute__((alias(STR(HASH(Bswap)))));
#endif
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
void HASH(Bswap)(uintWS_t data[], uint64_t nblk) {
#if HASH_ENDIAN == __BYTE_ORDER__
/* do nothing */
#else
  for (const uintWS_t *end=data+nblk*HASH_BLOCK_WORDS; data < end; data += HASH_BLOCK_WORDS) {
    #define _BSWAP(n, _) data[n] = htoDeWS(data[n])
    REPEAT_WITH_COUNTER(HASH_BLOCK_WORDS, SEMICOLON, _BSWAP);
    #undef _BSWAP
  }
#endif
}
#pragma GCC diagnostic pop

#if HASH_ALIASED
void ALIAS(Serialize)(uint8_t hash[], const uintWS_t state[])
__attribute__((alias(STR(HASH(Serialize)))));
#endif
void HASH(Serialize)(uint8_t hash[], const uintWS_t state[]) {
  serialize(hash, state);
}

#if HASH_ALIASED
void ALIAS(Partial)(uint8_t out[], const uintWS_t state[], size_t start, size_t end)
__attribute__((alias(STR(HASH(Partial)))));
#endif
void HASH(Partial)(uint8_t *restrict out, const uintWS_t *restrict _state, size_t start, size_t end) {
  const uintWS_t *state = __builtin_assume_aligned(_state, HASH_WORD_BYTES);
  if (start > end || start > HASH_DIGEST_LENGTH || end > HASH_DIGEST_LENGTH) __builtin_unreachable();
#if HASH_ENDIAN == __BYTE_ORDER__
  memcpy(out, ((uint8_t *)state)+start, end-start);
#else
  state += (start / HASH_WORD_BYTES);
  size_t pos = start;
  if (pos & (HASH_WORD_BYTES-1)) {
# if HASH_ENDIAN == __ORDER_BIG_ENDIAN__
      char i = (HASH_WORD_SIZE-8) - ((pos & (HASH_WORD_BYTES-1))<<3);
      while (i >= 0 && pos < end) {
        *out++ = (*state >> i) & 0xff;
        i -= 8;
        ++pos;
      }
# elif HASH_ENDIAN == __ORDER_LITTLE_ENDIAN__
      for (char i = (pos<<3); pos > end && i < HASH_WORD_SIZE; i += 8, ++pos) {
        *out++ = (*state >> i) & 0xff;
      }
# endif
    state += 1;
  }

  do {
    size_t rem = end - pos;
    if (rem >= HASH_WORD_BYTES) {
# if HASH_WORD_BITS == 32
      *out++ = NTH_BYTE_OF_WORD(*state, 0); *out++ = NTH_BYTE_OF_WORD(*state, 1);
      *out++ = NTH_BYTE_OF_WORD(*state, 2); *out++ = NTH_BYTE_OF_WORD(*state, 3);
# elif HASH_WORD_BITS == 64
      *out++ = NTH_BYTE_OF_WORD(*state, 0); *out++ = NTH_BYTE_OF_WORD(*state, 1);
      *out++ = NTH_BYTE_OF_WORD(*state, 2); *out++ = NTH_BYTE_OF_WORD(*state, 3);
      *out++ = NTH_BYTE_OF_WORD(*state, 4); *out++ = NTH_BYTE_OF_WORD(*state, 5);
      *out++ = NTH_BYTE_OF_WORD(*state, 6); *out++ = NTH_BYTE_OF_WORD(*state, 7);
# endif
    } else {
# if HASH_ENDIAN == __ORDER_BIG_ENDIAN__
      for (char i = (HASH_WORD_SIZE-8); rem; i -= 8, --rem) *out++ = (*state >> i) & 0xff;
# elif HASH_ENDIAN == __ORDER_LITTLE_ENDIAN__
      for (char i = 0; rem; i += 8, --rem) *out++ = (*state >> i) & 0xff;
# endif
    }
    pos += HASH_WORD_BYTES;
    state += 1;
  } while (pos < end);
#endif
}

#if HASH_DIGEST_LENGTH == HASH_STATE_WORDS * (HASH_WORD_SIZE / 8)
#if HASH_ALIASED
void ALIAS(Extend)(ALIAS(CTX) *ctx, uint8_t hash[], uint64_t nblk)
__attribute__((alias(STR(HASH(Extend)))));
#endif
void HASH(Extend)(HASH(CTX) *ctx, uint8_t hash[], uint64_t nblk) {
  const uintWS_t *digest = (uintWS_t*)hash;
  for (int i = 0; i < HASH_STATE_WORDS; ++i) {
    ctx->state[i] = DeWStoh(digest[i]);
  }
  ctx->bytelen = HASH_BLOCK_LENGTH * nblk;
}
#endif

static inline void __attribute__((always_inline)) serialize(uint8_t hash[], const uintWS_t *_state) {
  const uintWS_t *state = __builtin_assume_aligned(_state, HASH_WORD_BYTES);
  uintWS_t *outW = (uintWS_t *)hash;

#if HASH_STATE_WORDS > 0
# if HASH_DIGEST_LENGTH >= 1*(HASH_WORD_SIZE/8)
  outW[0] = htoDeWS(state[0]);
# elif HASH_DIGEST_LENGTH > 0*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[0]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 0
  hash[0] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 1
  hash[1] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 2
  hash[2] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 3
  hash[3] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 0
  hash[0] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 1
  hash[1] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 2
  hash[2] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 3
  hash[3] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 4
  hash[4] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 5
  hash[5] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 6
  hash[6] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 7
  hash[7] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
#if HASH_STATE_WORDS > 1
# if HASH_DIGEST_LENGTH >= 2*(HASH_WORD_SIZE/8)
  outW[1] = htoDeWS(state[1]);
# elif HASH_DIGEST_LENGTH > 1*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[1]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 4
  hash[4] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 5
  hash[5] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 6
  hash[6] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 7
  hash[7] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 8
  hash[8] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 9
  hash[9] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 10
  hash[10] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 11
  hash[11] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 12
  hash[12] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 13
  hash[13] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 14
  hash[14] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 15
  hash[15] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
#if HASH_STATE_WORDS > 2
# if HASH_DIGEST_LENGTH >= 3*(HASH_WORD_SIZE/8)
  outW[2] = htoDeWS(state[2]);
# elif HASH_DIGEST_LENGTH > 2*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[2]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 8
  hash[8] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 9
  hash[9] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 10
  hash[10] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 11
  hash[11] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 16
  hash[16] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 17
  hash[17] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 18
  hash[18] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 19
  hash[19] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 20
  hash[20] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 21
  hash[21] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 22
  hash[22] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 23
  hash[23] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
#if HASH_STATE_WORDS > 3
# if HASH_DIGEST_LENGTH >= 4*(HASH_WORD_SIZE/8)
  outW[3] = htoDeWS(state[3]);
# elif HASH_DIGEST_LENGTH > 3*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[3]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 12
  hash[12] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 13
  hash[13] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 14
  hash[14] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 15
  hash[15] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 24
  hash[24] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 25
  hash[25] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 26
  hash[26] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 27
  hash[27] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 28
  hash[28] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 29
  hash[29] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 30
  hash[30] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 31
  hash[31] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
#if HASH_STATE_WORDS > 4
# if HASH_DIGEST_LENGTH >= 5*(HASH_WORD_SIZE/8)
  outW[4] = htoDeWS(state[4]);
# elif HASH_DIGEST_LENGTH > 4*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[4]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 16
  hash[16] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 17
  hash[17] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 18
  hash[18] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 19
  hash[19] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 32
  hash[32] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 33
  hash[33] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 34
  hash[34] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 35
  hash[35] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 36
  hash[36] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 37
  hash[37] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 38
  hash[38] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 39
  hash[39] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
#if HASH_STATE_WORDS > 5
# if HASH_DIGEST_LENGTH >= 6*(HASH_WORD_SIZE/8)
  outW[5] = htoDeWS(state[5]);
# elif HASH_DIGEST_LENGTH > 5*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[5]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 20
  hash[20] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 21
  hash[21] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 22
  hash[22] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 23
  hash[23] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 40
  hash[40] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 41
  hash[41] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 42
  hash[42] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 43
  hash[43] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 44
  hash[44] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 45
  hash[45] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 46
  hash[46] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 47
  hash[47] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
#if HASH_STATE_WORDS > 6
# if HASH_DIGEST_LENGTH >= 7*(HASH_WORD_SIZE/8)
  outW[6] = htoDeWS(state[6]);
# elif HASH_DIGEST_LENGTH > 6*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[6]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 24
  hash[24] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 25
  hash[25] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 26
  hash[26] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 27
  hash[27] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 48
  hash[48] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 49
  hash[49] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 50
  hash[50] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 51
  hash[51] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 52
  hash[52] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 53
  hash[53] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 54
  hash[54] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 55
  hash[55] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
#if HASH_STATE_WORDS > 7
# if HASH_DIGEST_LENGTH >= 8*(HASH_WORD_SIZE/8)
  outW[7] = htoDeWS(state[7]);
# elif HASH_DIGEST_LENGTH > 7*(HASH_WORD_SIZE/8)
  uintWS_t temp = htoDeWS(state[7]);
#  if HASH_WORD_SIZE == 32
#   if HASH_DIGEST_LENGTH > 28
  hash[28] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 29
  hash[29] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 30
  hash[30] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 31
  hash[31] = ((uint8_t *)&temp)[3];
#   endif
#  elif HASH_WORD_SIZE == 64
#   if HASH_DIGEST_LENGTH > 56
  hash[56] = ((uint8_t *)&temp)[0];
#   endif
#   if HASH_DIGEST_LENGTH > 57
  hash[57] = ((uint8_t *)&temp)[1];
#   endif
#   if HASH_DIGEST_LENGTH > 58
  hash[58] = ((uint8_t *)&temp)[2];
#   endif
#   if HASH_DIGEST_LENGTH > 59
  hash[59] = ((uint8_t *)&temp)[3];
#   endif
#   if HASH_DIGEST_LENGTH > 60
  hash[60] = ((uint8_t *)&temp)[4];
#   endif
#   if HASH_DIGEST_LENGTH > 61
  hash[61] = ((uint8_t *)&temp)[5];
#   endif
#   if HASH_DIGEST_LENGTH > 62
  hash[62] = ((uint8_t *)&temp)[6];
#   endif
#   if HASH_DIGEST_LENGTH > 63
  hash[63] = ((uint8_t *)&temp)[7];
#   endif
#  else
#   error unsupported hash word size
#  endif
# endif
#endif
}
