#include "../../macros.h"
_H pragma once
_H include "hash.h"

_H include STR(../../../src/md/HASH_name/param.h)

_H if ((HASH_BLOCK_LENGTH+HASH_DIGEST_LENGTH)&(HASH_BLOCK_LENGTH-1))<(HASH_BLOCK_LENGTH-(HASH_WORD_SIZE/4))
_H define HMAC_OUTER_BLOCKS 2
_H else
_H define HMAC_OUTER_BLOCKS 3
_H endif

typedef struct {
  uint8_t data[HASH_BLOCK_LENGTH];
  uint64_t bytelen;
  uintWS_t state[HASH_STATE_WORDS];
  uint32_t datalen;
  uint8_t hmac[HASH_BLOCK_LENGTH*HMAC_OUTER_BLOCKS];
} JOIN(HMAC,HASH_NAME,CTX);

void JOIN(HMAC,HASH_NAME,Clone)(JOIN(HMAC,HASH_NAME,CTX) *dst, const JOIN(HMAC,HASH_NAME,CTX) *src);
void JOIN(HMAC,HASH_NAME,Init)(JOIN(HMAC,HASH_NAME,CTX) *ctx, const void *key, size_t len);
void JOIN(HMAC,HASH_NAME,Update)(JOIN(HMAC,HASH_NAME,CTX) *ctx, const uint8_t data[], size_t len);
void JOIN(HMAC,HASH_NAME,Final)(uint8_t hash[], JOIN(HMAC,HASH_NAME,CTX) *ctx);
void JOIN(HMAC,HASH_NAME)(const void *key, size_t key_sz, const uint8_t msg[], size_t msg_sz, uint8_t hash[]);
